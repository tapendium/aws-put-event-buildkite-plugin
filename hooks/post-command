#!/bin/bash

set -eo pipefail

CWD="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# shellcheck source=lib/shared.sh
. "$CWD/../lib/shared.sh"

ENTRIES_SIZE=0

# interate and ENTRIES_SIZE 
while IFS='=' read -r name _; do
  [[ $name =~ .*([0-9]) ]]
  ENTRIES_INDEX=${BASH_REMATCH[1]}
  ENTRY_VAR_NAME="ENTRY_${ENTRIES_INDEX}"
  declare "ENTRY_ARG_${COUNTER}=''"
  [ -z "${!ENTRY_VAR_NAME}" ] && {
    export ENTRY_${ENTRIES_INDEX}=0
  }
  ENTRIES_SIZE=$(( ENTRIES_SIZE > ENTRIES_INDEX ? ENTRIES_SIZE : ENTRIES_INDEX ))
done < <(env | sort | grep ^BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_[0-9])

[ $ENTRIES_SIZE -eq 0 ] && {
  echo "At least one entry needs to be defined" 1>&2
  exit 1
}

# validate entries
echo [Entries Size] $(( $ENTRIES_SIZE + 1 ))
while IFS='=' read -r name _; do
  [[ $name =~ .*([0-9]) ]]
  ENTRIES_INDEX=${BASH_REMATCH[1]}
  prefix="BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_${ENTRIES_INDEX}_"
  detail_arg="${prefix}DETAIL"
  detail_env_arg="${prefix}DETAIL_ENV"
  source_arg="${prefix}SOURCE"
  detail_type_arg="${prefix}DETAIL_TYPE"
  event_bus_name_arg="${prefix}EVENT_BUS_NAME"

  [ -z "${!detail_arg}" ] && [ -z "${!detail_env_arg}" ] && {
    export ENTRY_${ENTRIES_INDEX}=$((ENTRY_${ENTRIES_INDEX} | 1))
  }

  [ -z "${!source_arg}" ] && {
    export ENTRY_${ENTRIES_INDEX}=$((ENTRY_${ENTRIES_INDEX} | 2))
  }

  [ -z "${!detail_type_arg}" ] && {
    export ENTRY_${ENTRIES_INDEX}=$((ENTRY_${ENTRIES_INDEX} | 4))
  }

  [ -z "${!event_bus_name_arg}" ] && {
    export ENTRY_${ENTRIES_INDEX}=$((ENTRY_${ENTRIES_INDEX} | 8))
  }
done < <(env | sort | grep ^BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_[0-9])

# Report
COUNTER=0
VALID=1
while [ $COUNTER -le $ENTRIES_SIZE ]
do
  ENTRY="ENTRY_$COUNTER"
  if [ $(( ENTRY_$COUNTER )) -eq 0 ]; then
    COUNTER=$(( $COUNTER + 1 ))
    continue
  fi
  VALID=0

  [ $(( ENTRY_$COUNTER & 1 )) -eq 1 ] && {
    echo "[ERROR] Entry[$COUNTER]: detail or detail-env not defined." 
  }

  export ENTRY_$COUNTER=$((ENTRY_$COUNTER >> 1))

  [ $(( ENTRY_$COUNTER & 1 )) -eq 1 ] && {
    echo "[ERROR] Entry[$COUNTER]: source not defined." 
  }

  export ENTRY_$COUNTER=$((ENTRY_$COUNTER >> 1))

  [ $(( ENTRY_$COUNTER & 1 )) -eq 1 ] && {
    echo "[ERROR] Entry[$COUNTER]: detail-type not defined." 
  }

  export ENTRY_$COUNTER=$((ENTRY_$COUNTER >> 1))

  [ $(( ENTRY_$COUNTER & 1 )) -eq 1 ] && {
    echo "[ERROR] Entry[$COUNTER]: event-bus-name not defined." 
  }

  COUNTER=$(( $COUNTER + 1 ))
done

[ $VALID -eq 0 ] && {
  echo "[ERROR] Process failed with errors."
  exit 1
}

while IFS='=' read -r name _; do
  [[ $name =~ .*([0-9]) ]]
  ENTRIES_INDEX=${BASH_REMATCH[1]}
  DETAIL_ENV="BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_${ENTRIES_INDEX}_DETAIL_ENV"
  ENTRY_ARG_NAME="ENTRY_ARG_${ENTRIES_INDEX}"
  ENTRY_ARG=${!ENTRY_ARG_NAME}

  if [[ -n $DETAIL_ENV ]] && [[ $ENTRY_ARG != *"Detail"* ]]; then
    detail_env_key="${!name}"
    detail_env_val="${!detail_env_key}"
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=,Detail=${detail_env_val}"
  fi

  if [[ $name =~ (DETAIL)$ ]] && [[ $ENTRY_ARG != *"Detail"* ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=,Detail=${!name}"
  fi

  if [[ $name =~ (SOURCE)$ ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=,Source=${!name}"
  fi
  if [[ $name =~ (RESOURCES)$ ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=,Resources=${!name}"
  fi
  if [[ $name =~ (DETAIL_TYPE)$ ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=,DetailType=${!name}"
  fi
  if [[ $name =~ (EVENT_BUS_NAME)$ ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=,EventBusName=${!name}"
  fi
  if [[ $name =~ (TRACE_HEADER)$ ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=,TraceHeader=${!name}"
  fi
done < <(env | sort | grep ^BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_[0-9])

ADDITIONAL_ARGS=()
while IFS='=' read -r name _; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_ENDPOINT_URL) ]]; then
    ADDITIONAL_ARGS+=("--endpoint-url" "${!name}")
  fi

  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENDPOINT_ID) ]]; then
    ADDITIONAL_ARGS+=("--endpoint-id" "${!name}")
  fi

  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_EVENT_CLI_INPUT_JSON) ]]; then
    ADDITIONAL_ARGS+=("--cli-input-json" "${!name}")
  fi

  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_EVENT_GENERATE_CLI_SKELETON) ]]; then
    ADDITIONAL_ARGS+=("--generate-cli-skeleton" "${!name}")
  fi

  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_EVENT_REGION) ]]; then
    ADDITIONAL_ARGS+=("--region" "${!name}")
  fi

  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_EVENT_DEBUG) ]]; then
    ADDITIONAL_ARGS+=("--debug")
  fi
done < <(env | sort | grep ^BUILDKITE_PLUGIN_AWS_PUT)

ASSIGN_COUNTER=0
ENTRIES=("--entries")
while [ $ASSIGN_COUNTER -le $ENTRIES_SIZE ]
do
  ENTRY_ARG_ARR_NAME="ENTRY_ARG_$ASSIGN_COUNTER[*]"
  ENTRY_ARG_ARR=${!ENTRY_ARG_ARR_NAME}
  ENTRY_JOIN=$(IFS=, ; echo "${ENTRY_ARG_ARR}")
  ENTRIES+=("${ENTRY_JOIN:1}")
  ASSIGN_COUNTER=$(( $ASSIGN_COUNTER + 1 ))
done

echo "[PUBLISH EVENT]"
echo "[RNNNING COMMAND]"
echo "aws events put-events" "${ENTRIES[@]}" "${ADDITIONAL_ARGS[@]}"

put_events "${ENTRIES[@]}" "${ADDITIONAL_ARGS[@]}"
