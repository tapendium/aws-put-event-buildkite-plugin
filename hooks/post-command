#!/bin/bash

set -eo pipefail

CWD="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# shellcheck source=lib/shared.sh
. "$CWD/../lib/shared.sh"

entries=("--entries")
args=()
entry_count=0
entry=()
ENTRIES_SIZE=0

# Iterate and count the size
while IFS='=' read -r name _; do
  [[ $name =~ .*([0-9]) ]]
  ENTRIES_INDEX=${BASH_REMATCH[1]}
  ENTRY_VAR_NAME="ENTRY_${ENTRIES_INDEX}"
  [ -z "${!ENTRY_VAR_NAME}" ] && {
    export ENTRY_${ENTRIES_INDEX}=0
  }
  ENTRIES_SIZE=$(( ENTRIES_SIZE > ENTRIES_INDEX ? ENTRIES_SIZE : ENTRIES_INDEX ))
done < <(env | sort | grep ^BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_[0-9])

# validate entries
echo [Entries Size] $(( $ENTRIES_SIZE + 1 ))
while IFS='=' read -r name _; do
  [[ $name =~ .*([0-9]) ]]
  ENTRIES_INDEX=${BASH_REMATCH[1]}
  prefix="BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_${ENTRIES_INDEX}_"
  detail_arg="${prefix}DETAIL"
  detail_env_arg="${prefix}DETAIL_ENV"
  source_arg="${prefix}SOURCE"
  detail_type_arg="${prefix}DETAIL_TYPE"
  event_bus_name_arg="${prefix}EVENT_BUS_NAME"

  [ -z "${!detail_arg}" ] && [ -z "${!detail_env_arg}" ] && {
    export ENTRY_${ENTRIES_INDEX}=$((ENTRY_${ENTRIES_INDEX} | 1))
  }

  [ -z "${!source_arg}" ] && {
    export ENTRY_${ENTRIES_INDEX}=$((ENTRY_${ENTRIES_INDEX} | 2))
  }

  [ -z "${!detail_type_arg}" ] && {
    export ENTRY_${ENTRIES_INDEX}=$((ENTRY_${ENTRIES_INDEX} | 4))
  }

  [ -z "${!event_bus_name_arg}" ] && {
    export ENTRY_${ENTRIES_INDEX}=$((ENTRY_${ENTRIES_INDEX} | 8))
  }
done < <(env | sort | grep ^BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_[0-9])

# Report
COUNTER=0
VALID=1
while [ $COUNTER -le $ENTRIES_SIZE ]
do
  ENTRY="ENTRY_$COUNTER"
  if [ $(( ENTRY_$COUNTER )) -eq 0 ]; then
    COUNTER=$(( $COUNTER + 1 ))
    continue
  fi
  VALID=0

  [ $(( ENTRY_$COUNTER & 1 )) -eq 1 ] && {
    echo "[ERROR] Entry[$COUNTER]: detail or detail-env not defined." 
  }

  export ENTRY_$COUNTER=$((ENTRY_$COUNTER >> 1))

  [ $(( ENTRY_$COUNTER & 1 )) -eq 1 ] && {
    echo "[ERROR] Entry[$COUNTER]: source not defined." 
  }

  export ENTRY_$COUNTER=$((ENTRY_$COUNTER >> 1))

  [ $(( ENTRY_$COUNTER & 1 )) -eq 1 ] && {
    echo "[ERROR] Entry[$COUNTER]: detail-type not defined." 
  }

  export ENTRY_$COUNTER=$((ENTRY_$COUNTER >> 1))

  [ $(( ENTRY_$COUNTER & 1 )) -eq 1 ] && {
    echo "[ERROR] Entry[$COUNTER]: event-bus-name not defined." 
  }

  COUNTER=$(( $COUNTER + 1 ))
done

[ $VALID -eq 0 ] && {
  echo "[ERROR] Process failed with errors."
  exit 1
}

# use bc to store the record

[ -z "$BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_0_SOURCE" ] && {
  echo "At least one entry needs to be defined" 1>&2
  exit 1
}

# assign entries
while IFS='=' read -r name _; do
  [[ $name =~ .*([0-9]) ]]
  ENTRIES_INDEX=${BASH_REMATCH[1]}

  if [[ $name =~ (DETAIL_ENV)$ ]] ; then
    detail_env_key="${!name}"
    detail_env_val="${!detail_env_key}"
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=(Detail=${detail_env_val})"
  elif [[ $name =~ (DETAIL)$ ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=(Detail=${!name})"
  fi

  if [[ $name =~ (SOURCE)$ ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=(Source=${!name})"
  fi
  if [[ $name =~ (RESOURCES)$ ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=(Resources=${!name})"
  fi
  if [[ $name =~ (DETAIL_TYPE)$ ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=(DetailType=${!name})"
  fi
  if [[ $name =~ (EVENT_BUS_NAME)$ ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=(EventBusName=${!name})"
  fi
  if [[ $name =~ (TRACE_HEADER)$ ]]; then
    eval "ENTRY_ARG_${ENTRIES_INDEX}+=(TraceHeader=${!name})"
  fi
done < <(env | sort | grep ^BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_[0-9])

while IFS='=' read -r name _; do
  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_[0-9]+) ]]; then
    prefix="BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENTRIES_${entry_count}_"
    detail_arg="${prefix}DETAIL"
    detail_env_arg="${prefix}DETAIL_ENV"
    source_arg="${prefix}SOURCE"
    detail_type_arg="${prefix}DETAIL_TYPE"
    event_bus_name_arg="${prefix}EVENT_BUS_NAME"

    [ -z "${!detail_arg}" ] && [ -z "${!detail_env_arg}" ] && {
      echo "entries > detail or detail-env not defined. Exiting" 1>&2
      exit 1
    }

    [ -z "${!source_arg}" ] && {
      echo "entries > source not defined. Exiting" 1>&2
      exit 1
    }

    [ -z "${!detail_type_arg}" ] && {
      echo "entries > detail-type not defined. Exiting" 1>&2
      exit 1
    }

    [ -z "${!event_bus_name_arg}" ] && {
      echo "entries > event-bus-name not defined. Exiting" 1>&2
      exit 1
    }

    # if entry increments, reset the entry and increment the counter
    if ! [[ $name =~ (${entry_count}) ]]; then
      entry_join=$(IFS=, ; echo "${entry[*]}")
      entries+=("$entry_join")
      entry_count=$((entry_count+1))
      entry=()
    fi

    if [[ $name =~ (DETAIL_ENV)$ ]] ; then
      # S3_URL='http:...'
      # detail-env: 'S3_URL'
      # DETAIL_ENV = 'S3_URL'
      detail_env_key="${!name}"
      detail_env_val="${!detail_env_key}"
      entry+=("Detail=${detail_env_val}")
    elif [[ $name =~ (DETAIL)$ ]]; then
      entry+=("Detail=${!name}")
    fi

    if [[ $name =~ (SOURCE)$ ]]; then
      entry+=("Source=${!name}")
    fi
    if [[ $name =~ (RESOURCES)$ ]]; then
      entry+=("Resources=${!name}")
    fi
    if [[ $name =~ (DETAIL_TYPE)$ ]]; then
      entry+=("DetailType=${!name}")
    fi
    if [[ $name =~ (EVENT_BUS_NAME)$ ]]; then
      entry+=("EventBusName=${!name}")
    fi
    if [[ $name =~ (TRACE_HEADER)$ ]]; then
      entry+=("TraceHeader=${!name}")
    fi
  fi

  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_ENDPOINT_URL) ]]; then
    args+=("--endpoint-url" "${!name}")
  fi

  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_EVENT_ENDPOINT_ID) ]]; then
    args+=("--endpoint-id" "${!name}")
  fi

  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_EVENT_CLI_INPUT_JSON) ]]; then
    args+=("--cli-input-json" "${!name}")
  fi

  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_EVENT_GENERATE_CLI_SKELETON) ]]; then
    args+=("--generate-cli-skeleton" "${!name}")
  fi

  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_EVENT_REGION) ]]; then
    args+=("--region" "${!name}")
  fi

  if [[ $name =~ ^(BUILDKITE_PLUGIN_AWS_PUT_EVENT_DEBUG) ]]; then
    args+=("--debug")
  fi
done < <(env | sort)

# append last entry
entry_join=$(IFS=, ; echo "${entry[*]}")
entries+=("$entry_join")

# debugger
# [[ "${entries[@]}" != "Source" ]] && {
#   echo "$entry_join"
#   printf "%q " "${entries[@]}"
#   echo
#   printf "%q " "${args[@]}"
#   echo "\ndebug in testing"
#   exit 1;
# }

echo "--- Sending event"
echo -ne '\033[90m$\033[0m aws events put-events ' >&2

printf "%q " "${entries[@]}"
printf "%q " "${args[@]}"
echo

put_events "${entries[@]}" "${args[@]}"

