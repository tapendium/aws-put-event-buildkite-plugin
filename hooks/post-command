#!/bin/bash

set -eo pipefail

CWD="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# shellcheck source=lib/shared.sh
. "$CWD/../lib/shared.sh"

PREFIX="BUILDKITE_PLUGIN_AWS_PUT_EVENT_"
PREFIX_ENTRIES="${PREFIX}ENTRIES_"
declare -A ENTRIES
ENTRIES_SIZE=0

# interate and ENTRIES_SIZE 
while IFS='=' read -r name _; do
  [[ $name =~ .*([0-9]) ]]
  ENTRIES_INDEX=${BASH_REMATCH[1]}
  ENTRY_VAR_NAME="ENTRY_${ENTRIES_INDEX}"
  declare "ENTRY_ARG_${COUNTER}=''"
  [ -z "${!ENTRY_VAR_NAME}" ] && {
    export ENTRY_${ENTRIES_INDEX}=0
  }
  ENTRIES_SIZE=$(( ENTRIES_SIZE >= ENTRIES_INDEX + 1 ? ENTRIES_SIZE : ENTRIES_INDEX + 1 ))
done < <(env | sort | grep "^${PREFIX_ENTRIES}[0-9]")

echo [INFO] ENTRIES_SIZE $ENTRIES_SIZE

for (( COUNTER=0; COUNTER<=$ENTRIES_SIZE-1; COUNTER++ ))
do
  NUMBERED_PREFIX="${PREFIX_ENTRIES}${COUNTER}_"
  ENTRY_DETAIL="${NUMBERED_PREFIX}DETAIL"
  ENTRY_DETAIL_ENV="${NUMBERED_PREFIX}DETAIL_ENV"
  ENTRY_SOURCE="${NUMBERED_PREFIX}SOURCE"
  ENTRY_RESOURCES="${NUMBERED_PREFIX}RESOURCES"
  ENTRY_TRACE_HEADER="${NUMBERED_PREFIX}TRACE_HEADER"
  ENTRY_DETAIL_TYPE="${NUMBERED_PREFIX}DETAIL_TYPE"
  ENTRY_EVENT_BUS_NAME="${NUMBERED_PREFIX}EVENT_BUS_NAME"
  ENTRY_EVENT_BUS_NAME_ENV="${NUMBERED_PREFIX}EVENT_BUS_NAME_ENV"
  export ENTRY_VALIDATE_${COUNTER}=31 #11111

  if [ -n "${!ENTRY_DETAIL_ENV}" ]
  then
    # assign to detail
    ENTRY_DETAIL_ENV_NAME=${!ENTRY_DETAIL_ENV}
    export ${NUMBERED_PREFIX}DETAIL="$(buildkite-agent meta-data get "$ENTRY_DETAIL_ENV_NAME")"
  fi

  if [ -z "${!ENTRY_DETAIL}" ]
  then
    export ENTRY_VALIDATE_${COUNTER}=$((ENTRY_VALIDATE_${COUNTER} ^ 1))
  else
    echo ENTRY_DETAIL ${!ENTRY_DETAIL}
    json_pp >/dev/null 2>&1 <<<"${!ENTRY_DETAIL}"
    [ $? -eq 0 ] || {
      echo "invalid json"
      export ENTRY_VALIDATE_${COUNTER}=$((ENTRY_VALIDATE_${COUNTER} ^ 2))
    }
    ENTRIES[$COUNTER,0]="Detail=$( echo "${!ENTRY_DETAIL//\"/\\\"}" )"
    echo ENTRY_DETAIL_PARSED ${ENTRIES[$COUNTER,0]}
  fi

  if [ -z "${!ENTRY_SOURCE}" ]
  then
    export ENTRY_VALIDATE_${COUNTER}=$((ENTRY_VALIDATE_${COUNTER} ^ 4))
  else
    ENTRIES[$COUNTER,1]="Source=${!ENTRY_SOURCE}"
  fi

  if [ -z "${!ENTRY_DETAIL_TYPE}" ]
  then
    export ENTRY_VALIDATE_${COUNTER}=$((ENTRY_VALIDATE_${COUNTER} ^ 8))
  else
    ENTRIES[$COUNTER,2]="DetailType=${!ENTRY_DETAIL_TYPE}"
  fi

  if [ -n "${!ENTRY_EVENT_BUS_NAME_ENV}" ]
  then
    ENTRY_EVENT_BUS_NAME_ENV_NAME=${!ENTRY_EVENT_BUS_NAME_ENV}
    export ${NUMBERED_PREFIX}EVENT_BUS_NAME="$(buildkite-agent meta-data get "$ENTRY_EVENT_BUS_NAME_ENV_NAME")"
  fi

  if [ -z "${!ENTRY_EVENT_BUS_NAME}" ]
  then
    export ENTRY_VALIDATE_${COUNTER}=$((ENTRY_VALIDATE_${COUNTER} ^ 16))
  else
    ENTRIES[$COUNTER,3]="EventBusName=${!ENTRY_EVENT_BUS_NAME}"
  fi

  if [ -n "${!ENTRY_RESOURCES}" ]
  then
    ENTRIES[$COUNTER,4]="Resources=${!ENTRY_RESOURCES}"
  fi

  if [ -n "${!ENTRY_TRACE_HEADER}" ]
  then
    ENTRIES[$COUNTER,5]="TraceHeader=${!ENTRY_TRACE_HEADER}"
  fi

done

VALID=1
for (( COUNTER=0; COUNTER<=$ENTRIES_SIZE-1; COUNTER++ ))
do
  if [ $(( ENTRY_VALIDATE_$COUNTER )) -eq 31 ]; then
    continue
  fi

  VALID=0

  [ $(( ENTRY_VALIDATE_$COUNTER & 1 )) -eq 0 ] && {
    echo "[ERROR] Entry[$COUNTER]: detail or detail-env not defined." 
  }

  export ENTRY_VALIDATE_$COUNTER=$((ENTRY_VALIDATE_$COUNTER >> 1))

  [ $(( ENTRY_VALIDATE_$COUNTER & 1 )) -eq 0 ] && {
    echo "[ERROR] Entry[$COUNTER]: detail has invalid json" 
  }

  export ENTRY_VALIDATE_$COUNTER=$((ENTRY_VALIDATE_$COUNTER >> 1))

  [ $(( ENTRY_VALIDATE_$COUNTER & 1 )) -eq 0 ] && {
    echo "[ERROR] Entry[$COUNTER]: source not defined." 
  }

  export ENTRY_VALIDATE_$COUNTER=$((ENTRY_VALIDATE_$COUNTER >> 1))

  [ $(( ENTRY_VALIDATE_$COUNTER & 1 )) -eq 0 ] && {
    echo "[ERROR] Entry[$COUNTER]: detail-type not defined." 
  }

  export ENTRY_VALIDATE_$COUNTER=$((ENTRY_VALIDATE_$COUNTER >> 1))

  [ $(( ENTRY_VALIDATE_$COUNTER & 1 )) -eq 0 ] && {
    echo "[ERROR] Entry[$COUNTER]: event-bus-name not defined." 
  }
done

[ $ENTRIES_SIZE -eq 0 ] && {
  # warn and let it pass
  echo "[WARNING] At least one entry needs to be defined" 1>&2
  exit 1
}

[ $VALID -eq 0 ] && {
  echo "[ERROR] Process failed with errors."
  exit 2
}

ENTRIES_ARG="--entries"
for (( COUNTER=0; COUNTER<=$ENTRIES_SIZE-1; COUNTER++ ))
do
  if [ -n "${ENTRIES[$COUNTER,0]}" ]
  then
    ENTRIES_ARG+=" ${ENTRIES[$COUNTER,0]}"
  fi
  
  if [ -n "${ENTRIES[$COUNTER,1]}" ]
  then
    ENTRIES_ARG+=",${ENTRIES[$COUNTER,1]}"
  fi

  if [ -n "${ENTRIES[$COUNTER,2]}" ]
  then
    ENTRIES_ARG+=",${ENTRIES[$COUNTER,2]}"
  fi

  if [ -n "${ENTRIES[$COUNTER,3]}" ]
  then
    ENTRIES_ARG+=",${ENTRIES[$COUNTER,3]}"
  fi

  if [ -n "${ENTRIES[$COUNTER,4]}" ]
  then
    ENTRIES_ARG+=",${ENTRIES[$COUNTER,4]}"
  fi

  if [ -n "${ENTRIES[$COUNTER,5]}" ]
  then
    ENTRIES_ARG+=",${ENTRIES[$COUNTER,5]}"
  fi
done

ADDITIONAL_ARGS=()
while IFS='=' read -r name _; do
  if [[ $name =~ (ENDPOINT_URL)$ ]]; then
    ADDITIONAL_ARGS+=("--endpoint-url" "${!name}")
  fi

  if [[ $name =~ (ENDPOINT_ID)$ ]]; then
    ADDITIONAL_ARGS+=("--endpoint-id" "${!name}")
  fi

  if [[ $name =~ (CLI_INPUT_JSON)$ ]]; then
    ADDITIONAL_ARGS+=("--cli-input-json" "${!name}")
  fi

  if [[ $name =~ (GENERATE_CLI_SKELETON)$ ]]; then
    ADDITIONAL_ARGS+=("--generate-cli-skeleton" "${!name}")
  fi

  if [[ $name =~ (REGION)$ ]]; then
    ADDITIONAL_ARGS+=("--region" "${!name}")
  fi

  if [[ $name =~ (DEBUG)$ ]]; then
    ADDITIONAL_ARGS+=("--debug")
  fi
done < <(env | sort | grep "^${PREFIX}")

echo "[PUBLISH EVENT]"
echo "[RNNNING COMMAND]"

set -x
aws events put-events "$ENTRIES_ARG" "${ADDITIONAL_ARGS[@]}" --output json
set +x
